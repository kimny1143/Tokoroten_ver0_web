manage.py:
------------------------------
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Tokoroten_ver0_web.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

------------------------------
directory_handler.py:
------------------------------
import os
import logging
from . import audio_processing as ap

logging.basicConfig(filename='app.log', filemode='w', format='%(name)s - %(levelname)s - %(message)s', level=logging.DEBUG)

def process_directory(input_dir, sources, model, device, output_dir):
    for file_name in os.listdir(input_dir):
        if file_name.endswith('.wav'):
            file_path = os.path.join(input_dir, file_name)
            logging.info(f"Processing file: {file_path}")
            try:
                ap.process_audio_file(file_path, sources, model, device, output_dir)
            except Exception as e:
                logging.error(f"Error processing file {file_path}: {e}")

------------------------------
models.py:
------------------------------
from django.db import models

# Create your models here.

------------------------------
audio_processing.py:
------------------------------
import os  # Add this import
import logging
import torch
import torch.hub
import soundfile as sf
import numpy as np
import openunmix
import librosa

logging.basicConfig(filename='app.log', filemode='w', format='%(name)s - %(levelname)s - %(message)s', level=logging.DEBUG)

def load_audio_file(file_path):
    try:
        logging.info(f"Loading audio file: {file_path}")
        
        if not os.path.exists(file_path):
            logging.error(f"File does not exist: {file_path}")
            return None, None

        audio_data, sample_rate = sf.read(file_path)
        logging.info(f"Read audio file: {file_path}")

        if audio_data.ndim == 1:  # if audio is mono
            logging.info("Audio data is mono, duplicating channels")
            audio_data = np.stack([audio_data, audio_data])  # duplicate the channel to make it stereo

        if sample_rate != 44100:  # if sample rate is not 44100 Hz
            logging.info("Resampling audio data to 44100 Hz")
            audio_data = librosa.resample(audio_data, sample_rate, 44100)  # resample to 44100 Hz
            sample_rate = 44100

        return audio_data, sample_rate
    except Exception as e:
        logging.error(f"Error loading audio file {file_path}: {e}")
        return None, None


def process_audio_file(file_path, sources, model, device, output_dir):
    try:
        audio_data, sample_rate = load_audio_file(file_path)
        audio_data = audio_data.T  # transpose the audio data
        audio_tensor = torch.from_numpy(audio_data).float().to(device)  # convert to Float here
        audio_tensor = audio_tensor[None, ...]  # add batch dimension
        separator = torch.hub.load('sigsep/open-unmix-pytorch', model, device=device)
        estimates = separator(audio_tensor)  # no need to convert to Double here

        source_names = ['vocals', 'drums', 'bass', 'other']
        for i, source_name in enumerate(source_names):
            if source_name in sources:
                source_audio = estimates[0, i, :, :].detach().cpu().numpy()  # convert to numpy
                output_filename = f"{os.path.splitext(os.path.basename(file_path))[0]}_{source_name}.wav"  # changed file_name to os.path.basename(file_path)
                output_path = os.path.join(output_dir, output_filename)  # changed './output' to output_dir
                sf.write(output_path, source_audio.T, sample_rate)
    except Exception as e:
        print(f"Error processing file {file_path}: {e}")

------------------------------
apps.py:
------------------------------
from django.apps import AppConfig


class TokorotenConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'Tokoroten'

------------------------------
arg_parser.py:
------------------------------
import os
import argparse
import logging
import directory_handler as dh # Import the directory handler
import certifi

logging.basicConfig(filename='app.log', filemode='w', format='%(name)s - %(levelname)s - %(message)s', level=logging.DEBUG)


def parse_and_process():
    # Set the SSL_CERT_FILE environment variable
    os.environ['SSL_CERT_FILE'] = certifi.where()

    parser = argparse.ArgumentParser(description='Select the parts for source separation.')
    # same argument setup as before
    args = parser.parse_args()

    sources = args.sources.split(',')
    input_dir = args.input_dir
    output_dir = args.output_dir
    model = args.model
    device = args.device

    dh.process_directory(input_dir, sources, model, device, output_dir)
    
if __name__ == "__main__":
    parse_and_process()

------------------------------
admin.py:
------------------------------
from django.contrib import admin

# Register your models here.

------------------------------
tests.py:
------------------------------
from django.test import TestCase

# Create your tests here.

------------------------------
urls.py:
------------------------------
from django.urls import path
from . import views

urlpatterns = [
    path('', views.index, name='index'),
]

------------------------------
views.py:
------------------------------
from django.shortcuts import render
from django.http import FileResponse
from .directory_handler import process_directory
from django.conf import settings
import os

def index(request):
    if request.method == 'POST':
        files = request.FILES.getlist('file-input')  # Get the uploaded files
        sources = request.POST.getlist('sources')  # Get the sources

        output_files = []

        # Create a temporary directory for the uploaded files
        temp_dir = settings.MEDIA_ROOT
        os.makedirs(temp_dir, exist_ok=True)

        # Save all the uploaded files to the temporary directory
        for file in files:
            file_path = os.path.join(temp_dir, file.name)
            with open(file_path, 'wb+') as destination:
                for chunk in file.chunks():
                    destination.write(chunk)

        # Process all the files in the temporary directory
        process_directory(temp_dir, sources, 'umxl', 'cpu', temp_dir)

        # Get the processed files
        for source in sources:
            output_filename = f"{os.path.splitext(file.name)[0]}_{source}.wav"
            output_path = os.path.join(temp_dir, output_filename)
            relative_output_path = os.path.relpath(output_path, settings.MEDIA_ROOT)  # Get the relative path
            output_files.append(relative_output_path)


        # Pass the processed files to the template
        return render(request, 'index.html', {'output_files': output_files})

    return render(request, 'index.html')

------------------------------
asgi.py:
------------------------------
"""
ASGI config for Tokoroten_ver0_web project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Tokoroten_ver0_web.settings')

application = get_asgi_application()

------------------------------
settings.py:
------------------------------
"""
Django settings for Tokoroten_ver0_web project.

Generated by 'django-admin startproject' using Django 3.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-!@k(ub=idb^%pv5m3k@*rmif1=#2q(czz=!5f=vhi=b7e4&0dx'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'Tokoroten',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Tokoroten_ver0_web.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',  # Add this line
            ],
        },
    },
]

WSGI_APPLICATION = 'Tokoroten_ver0_web.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Add the following lines to the end of the file
import os

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

------------------------------
urls.py:
------------------------------
"""Tokoroten_ver0_web URL Configuration

The `urlpatterns` list routes URLs to views. For more information please see:
    https://docs.djangoproject.com/en/3.2/topics/http/urls/
Examples:
Function views
    1. Add an import:  from my_app import views
    2. Add a URL to urlpatterns:  path('', views.home, name='home')
Class-based views
    1. Add an import:  from other_app.views import Home
    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
Including another URLconf
    1. Import the include() function: from django.urls import include, path
    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
"""
from django.contrib import admin
from django.urls import include, path
from Tokoroten_ver0_web import settings
from django.conf.urls.static import static

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('Tokoroten.urls')),
]
if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
------------------------------
wsgi.py:
------------------------------
"""
WSGI config for Tokoroten_ver0_web project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'Tokoroten_ver0_web.settings')

application = get_wsgi_application()

------------------------------
